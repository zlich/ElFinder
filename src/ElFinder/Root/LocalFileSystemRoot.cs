using System;
using System.IO;

namespace ElFinder
{
    /// <summary>
    /// Represents local filesystem root
    /// </summary>
    public class LocalFileSystemRoot : IRoot
    {
        /// <summary>
        /// Gets a autogenerated prefix of root
        /// </summary>
        public string VolumeId
        {
            get { return m_volumeId; }
            set
            {
                if (value == null)
                    throw new ArgumentNullException();
                m_volumeId = value;
            }
        }

        /// <summary>
        /// Get or sets alias for root. If not set will use directory name of path
        /// </summary>
        public string Alias
        {
            get { return m_alias; }
            set { m_alias = value; }
        }

        /// <summary>
        /// Get or sets url that points to path directory (also called 'root URL'). 
        /// </summary>
        public string Url
        {
            get { return m_url; }
            set { m_url = value; }
        }

        /// <summary>
        /// Get or sets a directory which is root 
        /// </summary>
        public IDirectoryInfo Directory
        {
            get { return new LocalDirectoryInfo(this, m_directory); }
        }

        /// <summary>
        /// Get or sets a subfolder of root diretory, which will be start 
        /// </summary>
        public IDirectoryInfo StartPath
        {
            get { return m_startDirectory; }
            set
            {
                if (value == null)
                    m_startDirectory = null;
                else
                {
                    if (value.Root != this)
                        throw new ArgumentException("Start directory must be from the same root");
                    LocalDirectoryInfo dir = (LocalDirectoryInfo)value;
                    if (!dir.Exists)
                        throw new ArgumentException("Start directory must exist");
                    m_startDirectory = dir;
                }
            }
        }

        public ThumbnailsManager ThumbnailsManager
        {
            get { return m_thumbnailManager; }
        }

        public AccessManager AccessManager
        {
            get { return m_accessManager; }
        }

        public IDirectoryInfo GetDirectory(string relativePath)
        {
            if (relativePath == null)
                throw new ArgumentNullException();
            return new LocalDirectoryInfo(this, Path.Combine(m_directoryPath, NormalizeRelativePath(relativePath)));
        }

        public IFileInfo GetFile(string relativePath)
        {
            if (relativePath == null)
                throw new ArgumentNullException();
            return new LocalFileInfo(this, Path.Combine(m_directoryPath, NormalizeRelativePath(relativePath)));
        }

        public LocalFileSystemRoot(DirectoryInfo directory, string url)
        {
            if (directory == null)
                throw new ArgumentNullException("directory", "Root directory can not be null");
            if (!directory.Exists)
                throw new ArgumentException("Root directory must exist", "directory");

            //m_parentPath = directory.Parent != null ? directory.Parent.FullName : string.Empty;
            m_directory = directory;
            m_directoryPath = directory.FullName;
            int length = m_directoryPath.Length;
            if (m_directoryPath[length - 1] == '\\')
                m_directoryPath = m_directoryPath.Substring(0, length);

            m_thumbnailManager = new ThumbnailsManager();
            m_accessManager = new AccessManager();
            m_url = url;
        }

        public LocalFileSystemRoot(string directory, string url)
            : this(new DirectoryInfo(directory), url) { }

        public LocalFileSystemRoot(DirectoryInfo directory) :
            this(directory, null) { }

        public LocalFileSystemRoot(string directory) :
            this(directory, null) { }

        private static string NormalizeRelativePath(string path)
        {
            int start = 0;
            int length = path.Length;
            if (path.Length == 0)
                return string.Empty;
            if (path[0] == '/' || path[0] == '\\')
            {
                start = 1;
                length--;
            }
            if (length > 0 && (path[length - 1] == '/' && path[length - 1] == '\\'))
                length--;
            return path.Substring(start, length);
        }

        //internal string ParentPath
        //{
        //    get { return m_parentPath; }
        //}

        //private readonly string m_parentPath;
        private readonly DirectoryInfo m_directory;
        private readonly string m_directoryPath;

        private readonly ThumbnailsManager m_thumbnailManager;
        private readonly AccessManager m_accessManager;

        private string m_url;
        private string m_alias;
        private string m_volumeId;
        private LocalDirectoryInfo m_startDirectory;
    }
}
