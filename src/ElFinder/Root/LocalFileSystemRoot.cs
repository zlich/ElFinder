using System;
using System.IO;

namespace ElFinder
{
    /// <summary>
    /// Represents local filesystem root
    /// </summary>
    public class LocalFileSystemRoot : IRoot
    {
        /// <summary>
        /// Gets a autogenerated prefix of root
        /// </summary>
        public string VolumeId
        {
            get { return m_volumeId; }
            set
            {
                if (value == null)
                    throw new ArgumentNullException();
                m_volumeId = value;
            }
        }

        /// <summary>
        /// Get or sets alias for root. If not set will use directory name of path
        /// </summary>
        public string Alias
        {
            get { return m_alias; }
            set { m_alias = value; }
        }

        /// <summary>
        /// Get or sets url that points to path directory (also called 'root URL'). 
        /// </summary>
        public string Url
        {
            get { return m_url; }
            set { m_url = value; }
        }

        /// <summary>
        /// Get or sets a directory which is root 
        /// </summary>
        public IDirectoryInfo Directory
        {
            get { return new LocalDirectoryInfo(this, m_directory); }
        }

        /// <summary>
        /// Get or sets a subfolder of root diretory, which will be start 
        /// </summary>
        public IDirectoryInfo StartPath
        {
            get { return new LocalDirectoryInfo(this, m_startPath); }
        }

        public ThumbnailsManager ThumbnailsManager
        {
            get { return m_thumbnailManager; }
        }

        public AccessManager AccessManager
        {
            get { return m_accessManager; }
        }

        public IDirectoryInfo GetDirectory(string relativePath)
        {
            throw new NotImplementedException();
        }

        public IFileInfo GetFile(string relativePath)
        {
            throw new NotImplementedException();
        }

        public LocalFileSystemRoot(DirectoryInfo directory, string url)
        {
            if (directory == null)
                throw new ArgumentNullException("directory", "Root directory can not be null");
            if (!directory.Exists)
                throw new ArgumentException("Root directory must exist", "directory");

            m_parentPath = directory.Parent != null ? directory.Parent.FullName : string.Empty;
            m_directory = directory;

            m_thumbnailManager = new ThumbnailsManager();
            m_accessManager = new AccessManager();
            m_url = url;
        }

        public LocalFileSystemRoot(string directory, string url)
            : this(new DirectoryInfo(directory), url) { }

        public LocalFileSystemRoot(DirectoryInfo directory) :
            this(directory, null) { }

        public LocalFileSystemRoot(string directory) :
            this(directory, null) { }

        internal string ParentPath
        {
            get { return m_parentPath; }
        }

        private readonly string m_parentPath;
        private readonly DirectoryInfo m_directory;
        private readonly DirectoryInfo m_startPath;
        private readonly ThumbnailsManager m_thumbnailManager;
        private readonly AccessManager m_accessManager;
        private string m_url;
        private string m_alias;
        private string m_volumeId;
    }
}
